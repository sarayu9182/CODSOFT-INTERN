import React from 'react';
const Home = () => (
  <div>
    <h1>Welcome to the Job Board</h1>
    <p>Find your dream job here!</p>
    <FeaturedJobs />
  </div>
);
export default Home;
import React, { useState, useEffect } from 'react';
const JobListings = () => {
  const [jobs, setJobs] = useState([]);
  useEffect(() => {
    fetch('/api/jobs')
      .then(res => res.json())
      .then(data => setJobs(data));
  }, []);
  return (
    <div>
      <h2>Job Listings</h2>
      {jobs.map(job => (
        <div key={job.id}>
          <h3>{job.title}</h3>
          <p>{job.description}</p>
        </div>
      ))}
    </div>
  );
};
export default JobListings;
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
const JobDetail = () => {
  const { id } = useParams();
  const [job, setJob] = useState({});
  useEffect(() => {
    fetch(/api/jobs/${id})
      .then(res => res.json())
      .then(data => setJob(data));
  }, [id]);
  return (
    <div>
      <h2>{job.title}</h2>
      <p>{job.description}</p>
      <p>{job.requirements}</p>
    </div>
  );
};
export default JobDetail;
import React, { useState } from 'react';
const EmployerDashboard = () => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [requirements, setRequirements] = useState('');
  const handleSubmit = (e) => {
    e.preventDefault();
    fetch('/api/jobs', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title, description, requirements }),
    }).then(() => {
      setTitle('');
      setDescription('');
      setRequirements('');
    });
  };
  return (
    <div>
      <h2>Post a New Job</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Job Title"
          required
        />
        <textarea
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Job Description"
          required
        ></textarea>
        <textarea
          value={requirements}
          onChange={(e) => setRequirements(e.target.value)}
          placeholder="Job Requirements"
          required
        ></textarea>
        <button type="submit">Post Job</button>
      </form>
    </div>
  );
};
export default EmployerDashboard;
import React, { useState, useEffect } from 'react';
const CandidateDashboard = () => {
  const [applications, setApplications] = useState([]);
  useEffect(() => {
    fetch('/api/applications')
      .then(res => res.json())
      .then(data => setApplications(data));
  }, []);
  return (
    <div>
      <h2>My Applications</h2>
      {applications.map(app => (
        <div key={app.id}>
          <h3>{app.jobTitle}</h3>
          <p>Status: {app.status}</p>
        </div>
      ))}
    </div>
  );
};
export default CandidateDashboard;
import React, { useState } from 'react';
const JobApplication = ({ jobId }) => {
  const [resume, setResume] = useState(null);
  const handleSubmit = (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('resume', resume);
    fetch(/api/jobs/${jobId}/apply, {
      method: 'POST',
      body: formData,
    }).then(() => {
      setResume(null);
    });
  };
  return (
    <form onSubmit={handleSubmit}>
      <input
        type="file"
        onChange={(e) => setResume(e.target.files[0])}
        required
      />
      <button type="submit">Apply</button>
    </form>
  );
};
export default JobApplication;
import React, { useState } from 'react';
const JobSearch = ({ onSearch }) => {
  const [query, setQuery] = useState('');
  const handleSearch = () => {
    fetch(/api/jobs?search=${query})
      .then(res => res.json())
      .then(data => onSearch(data));
  };
  return (
    <div>
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search Jobs"
      />
      <button onClick={handleSearch}>Search</button>
    </div>
  );
};
export default JobSearch;
const nodemailer = require('nodemailer');
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'your-email@gmail.com',
    pass: 'your-email-password',
  },
});

app.post('/api/jobs/:id/apply', (req, res) => {
  // handle application logic
  // send email notification
  const mailOptions = {
    from: 'your-email@gmail.com',
    to: req.body.email,
    subject: 'Job Application Received',
    text: 'Your application has been received.',
  };
  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      return console.log(error);
    }
    console.log('Email sent: ' + info.response);
  });
  res.json({ message: 'Application submitted' });
});
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const User = mongoose.model('User', new mongoose.Schema({
  username: String,
  password: String,
}));

app.post('/api/register', async (req, res) => {
  const hashedPassword = await bcrypt.hash(req.body.password, 10);
  const newUser = new User({ username: req.body.username, password: hashedPassword });
  await newUser.save();
  res.json(newUser);
});

app.post('/api/login', async (req, res) => {
  const user = await User.findOne({ username: req.body.username });
  if (user && await bcrypt.compare(req.body.password, user.password)) {
    const token = jwt.sign({ id: user._id }, 'yourSecretKey');
    res.json({ token });
  } else {
    res.status(401).json({ message: 'Invalid credentials' });
  }
});
@media (max-width: 768px) {
  .container {
    width: 100%;
    padding: 0;
  }

  .job-listing {
    flex-direction: column;
  }

  .dashboard {
    padding: 10px;
  }
}
