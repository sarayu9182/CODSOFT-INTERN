mkdir backend
cd backend
npm init -y
npm install express mongoose body-parser cors bcryptjs jsonwebtoken
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost/blog', { useNewUrlParser: true, useUnifiedTopology: true });

app.listen(5000, () => console.log('Server started on port 5000'));
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blog Platform</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>Blog Platform</h1>
        <nav>
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/about">About</a></li>
                <li><a href="/blog">Blog</a></li>
                <li><a href="/contact">Contact</a></li>
            </ul>
        </nav>
    </header>
    
    <main id="content"></main>

    <footer>
        <p>&copy; 2024 Blog Platform. All rights reserved.</p>
    </footer>

    <script src="app.js"></script>
</body>
</html>
const User = mongoose.model('User', new mongoose.Schema({
  username: String,
  password: String,
}));

app.post('/api/register', async (req, res) => {
  const hashedPassword = await bcrypt.hash(req.body.password, 10);
  const newUser = new User({ username: req.body.username, password: hashedPassword });
  await newUser.save();
  res.json(newUser);
});

app.post('/api/login', async (req, res) => {
  const user = await User.findOne({ username: req.body.username });
  if (user && await bcrypt.compare(req.body.password, user.password)) {
    const token = jwt.sign({ id: user._id }, 'yourSecretKey');
    res.json({ token });
  } else {
    res.status(401).json({ message: 'Invalid credentials' });
  }
});
const Post = mongoose.model('Post', new mongoose.Schema({
  title: String,
  content: String,
  author: String,
  date: { type: Date, default: Date.now }
}));

app.post('/api/posts', async (req, res) => {
  const newPost = new Post(req.body);
  await newPost.save();
  res.json(newPost);
});
const Comment = mongoose.model('Comment', new mongoose.Schema({
  postId: mongoose.Schema.Types.ObjectId,
  content: String,
  author: String,
  date: { type: Date, default: Date.now }
}));

app.post('/api/posts/:id/comments', async (req, res) => {
  const newComment = new Comment({ ...req.body, postId: req.params.id });
  await newComment.save();
  res.json(newComment);
});
app.get('/api/posts', async (req, res) => {
  const searchQuery = req.query.search || '';
  const posts = await Post.find({ title: { $regex: searchQuery, $options:
